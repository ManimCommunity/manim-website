{"componentChunkName":"component---src-templates-plugin-template-js","path":"/plugin/manim-chemistry/","result":{"pageContext":{"pageContent":{"info":{"author":"","author_email":"UMDQ <unmoldequimica@gmail.com>","bugtrack_url":null,"classifiers":["License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python :: 3"],"description":"<h1>Table of contents:</h1>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#what-is-manim-chemistry\" rel=\"nofollow\">What is manim-Chemistry</a></li>\n<li><a href=\"#what-can-manim-chemistry-do-right-now\" rel=\"nofollow\">What can manim-Chemistry do right now?</a></li>\n<li><a href=\"#create-2d-molecules\" rel=\"nofollow\">Create 2D molecules</a></li>\n<li><a href=\"#create-3d-molecule\" rel=\"nofollow\">Create 3D molecule</a></li>\n<li><a href=\"#create-a-periodic-table\" rel=\"nofollow\">Create a periodic table</a></li>\n<li><a href=\"#making-atomic-orbitals\" rel=\"nofollow\">Making atomic orbitals</a></li>\n<li><a href=\"#making-bohr-diagrams\" rel=\"nofollow\">Making Bohr diagrams</a></li>\n<li><a href=\"#reading-mol-files\" rel=\"nofollow\">Reading .mol files</a></li>\n<li><a href=\"#typical-issues-with-mol-files\" rel=\"nofollow\">Typical issues with .mol files</a></li>\n<li><a href=\"#\" rel=\"nofollow\">Take a look to examples</a></li>\n<li><a href=\"#made-with-manimchemistry\" rel=\"nofollow\">Made with manimChemistry</a></li>\n<li><a href=\"#how-to-contact\" rel=\"nofollow\">How to contact</a></li>\n<li><a href=\"#great-contributers\" rel=\"nofollow\">Great contributers</a></li>\n</ul>\n<h1>Installation.</h1>\n<p>You can install via pip:</p>\n<pre><code>pip install manim_chemistry\n</code></pre>\n<p>You can also clone the repo and install it from here:</p>\n<pre><code>git clone https://github.com/UnMolDeQuimica/manim-Chemistry.git\ncd manim-Chemistry \npython -m pip install .\n</code></pre>\n<p>or</p>\n<pre><code>git clone https://github.com/UnMolDeQuimica/manim-Chemistry.git\ncd manim-Chemistry \npython -m pip install -e .\n</code></pre>\n<h1>What is manim-Chemistry?</h1>\n<p>manim-Chemistry is a manim plugin designed to make chemistry animations easier.</p>\n<p>To my knowledge, there is only another plugin related to chemistry called <a href=\"https://github.com/kilacoda/chanim\" rel=\"nofollow\">chanim</a> that aims to import to manim the chemfig package (and does an amazing job!).</p>\n<p>The philosophy of manim-Chemistry goes into a different direction: manim-Chemistry tries to use the manim tools in combination with <a href=\"https://en.wikipedia.org/wiki/Chemical_table_file\" rel=\"nofollow\">.mol</a> files and <a href=\"https://en.wikipedia.org/wiki/Comma-separated_values\" rel=\"nofollow\">.csv</a> databases useful basic classes to create beatufil chemistry related animations such as a Periodic Table or 2d and 3d chemical structures.</p>\n<p>Also, manim-Chemistry will try to do as much things from scratch as possible. That means I will also avoid using libraries such as <a href=\"https://mendeleev.readthedocs.io/en/stable/\" rel=\"nofollow\">Mendeleev</a>, <a href=\"https://www.rdkit.org/\" rel=\"nofollow\">RDKit</a>, <a href=\"https://pymol.org/2/\" rel=\"nofollow\">PyMOL</a>, <a href=\"https://openbabel.org/wiki/Main_Page\" rel=\"nofollow\">Open Babel</a> ammong others. The reason is avoid depending on 3rd party packages that might need intensive maintenance. However, the users can combine the power of those libraries with manim-Chemistry to make life easier.</p>\n<p>This project is still a work in progress and there is no date for a final realease yet.</p>\n<h1>What can manim-Chemistry do right now?</h1>\n<p>This will be a summary of the capabilities of manim-Chemistry. As this project is still in progress this might not be up to date. Check the examples to get a better idea of what you can do. You might want to check the TODO file to know what is comming and yet to be done. Feel free to open issues and pull requests to make this even greater!</p>\n<h2>Create 2D molecules</h2>\n<p>To create 2D molecules you simply need a .mol file with atoms and bonds data. Take a look at the morphine.mol file inside examples to know how should it look.</p>\n<p>To create a Scene with a 2D molecule you should have a structure like this:</p>\n<pre><code>from manim import *\nfrom manim_chemistry import *\n\nclass TwoDMoleculeScene(Scene):\n   def construct(self):\n        morphine = MMoleculeObject.from_mol_file(\"morphine.mol\")\n        self.add(morphine)\n</code></pre>\n<p>You can run manim as usual:</p>\n<p><code>manim .\\examples.py -ps</code></p>\n<p>The result looks like this:</p>\n<p><img src=\"/examples/examples_assets/2D_morphine_bad.png\" alt=\"plot\"></p>\n<p>Doesn't look really good, right? Double bonds are not in the correct position. We can solve this!</p>\n<p>You can set to True an option to see the bonds numbering. You can do a similar thing to the atoms. This numbering is given by the .mol file and is NOT related to the chemical strucure.</p>\n<pre><code>from manim import *\nfrom manim_chemistry import *\n\nclass TwoDMoleculeScene(Scene):\n   def construct(self):\n        morphine = MMoleculeObject.from_mol_file(\"morphine.mol\", add_bonds_numbering=True)\n        self.add(morphine)\n</code></pre>\n<p>We get</p>\n<p><img src=\"/examples/examples_assets/2D_morphine_bond_numbering.png\" alt=\"plot\"></p>\n<p>So we need to rotate bonds 7 and 20. We can add this adding their index to the rotate_bonds list:</p>\n<pre><code>from manim import *\nfrom manim_chemistry import *\n\nclass TwoDMoleculeScene(Scene):\n   def construct(self):\n        morphine = MMoleculeObject.from_mol_file(\"morphine.mol\", rotate_bonds=[7, 20])\n        self.add(morphine)\n</code></pre>\n<p>Result:\n<img src=\"/examples/examples_assets/2D_morphine_corrected_bonds.png\" alt=\"plot\"></p>\n<p>Now we are talking!</p>\n<h3>Named Molecules:</h3>\n<p>You may want to add a name to a molecule. It is very simple, but it is handy to do all in the same object. You can create a NamedMolecule similarly to how you create a MMoleculeObject:</p>\n<pre><code>from manim import *\nfrom manim_chemistry import *\n\nclass NamedMoleculeExample(Scene):\n    def construct(self):\n        named_molecule = NamedMolecule.from_mol_file(name=\"Morphine\", filename=\"morphine.mol\")\n        self.add(diagram)\n</code></pre>\n<p><img src=\"/examples/examples_assets/NamedMoleculeExample_ManimCE_v0.17.3.png\" alt=\"plot\"></p>\n<p>You can also provided an already created molecule or an already created text and the NamedMolecule class will group them. This allows greater control for the user.</p>\n<h2>Create 3D molecule:</h2>\n<p>Creating a 3D molecule requires a bit more effort. We need two things:</p>\n<ol>\n<li>A .mol file (like before)</li>\n<li>A csv data file with data for your atoms. You can find an example inside the examples folder called \"Elementos.csv\".</li>\n</ol>\n<p>The .mol will be parsed and the .csv will tell manim-Chemistry some data, specially the color. Using the same file as before we can create a 3D structure for morphine:</p>\n<pre><code>from manim import *\nfrom manim_chemistry import *\n\nclass Draw3DMorphine(ThreeDScene):\n    def construct(self):\n        three_d_morphine = ThreeDMolecule.from_mol_file(\"morphine.mol\", \"Elementos.csv\")\n        self.add(three_d_morphine)\n        self.wait()\n</code></pre>\n<p>To be able to run this you need to run manim using opengl as renderer:</p>\n<p><code>manim .\\examples.py Draw3DMorphine -ps --renderer=opengl</code></p>\n<p>Here is the result!</p>\n<p><img src=\"/examples/examples_assets/Draw3DMorphine_ManimCE_v0.17.3.png\" alt=\"plot\"></p>\n<p>As you can see, the coloring is defined in the \"Elementos.csv\" file, but you can make your own source file to customize colors!</p>\n<h2>Create a periodic table:</h2>\n<p>Like before, we need a source file to draw everything. Again, feel free to make your own from a copy of \"Elementos.csv\"</p>\n<p>You can create the frame for an element using:</p>\n<pre><code>from manim import *\nfrom manim_chemistry import *\n\nclass DrawCarbonElement(Scene):\n    def construct(self):\n        carbon = MElementObject.from_csv_file_data(filename=\"Elementos.csv\", atomic_number=6)\n        self.add(carbon)\n</code></pre>\n<p>And there you have it!</p>\n<p><img src=\"/examples/examples_assets/DrawCarbonElement_ManimCE_v0.17.3.png\" alt=\"plot\"></p>\n<p>To make the whole periodic table you need data for every element inside that data source file. Elementos.csv already has it, so you just have to copy it and adapt to your needs. Using the cpk coloring and the following code we get that beautiful periodic table:</p>\n<pre><code>from manim import *\nfrom manim_chemistry import *\n\nclass DrawPeriodicTable(Scene):\n    def construct(self):\n        self.add(PeriodicTable(data_file=\"Elementos.csv\"))\n</code></pre>\n<p><img src=\"/examples/examples_assets/DrawPeriodicTable_ManimCE_v0.17.3.png\" alt=\"plot\"></p>\n<h2>Making atomic orbitals:</h2>\n<p>Molecular orbitals are very complex and consuming for a simple python script, but we can get atomic orbitals pretty easily just by selecting the l and m level we want to plot:</p>\n<pre><code>from manim import *\nfrom manim_chemistry import *\n\nclass DrawPOrbital(Scene):\n    def construct(self):\n        orbital = Orbital(l=1, m=-1)\n        self.add(orbital)\n</code></pre>\n<p>One again you need to use opengl as renderer:</p>\n<p><code>manim .\\examples.py DrawPOrbital -ps --renderer=opengl</code></p>\n<p><img src=\"/examples/examples_assets/orbitals_example.png\" alt=\"plot\"></p>\n<h2>Making Bohr diagrams:</h2>\n<p>Bohr diagrams are very outdated, but drawing them might be usefull to communicate certain ideas. Here all you have to do is set the number of protons, electrons and neutrons and you will get a nice diagram:</p>\n<pre><code>from manim import *\nfrom manim_chemistry import *\n\nclass DrawBohrDiagram(Scene):\n    def construct(self):\n        diagram = BohrAtom(e=14, p=14,, n=10)\n        self.add(diagram)\n</code></pre>\n<p>Here you have your nice diagram!</p>\n<p><img src=\"/examples/examples_assets/BohrDiagram_ManimCE_v0.17.3.png\" alt=\"plot\"></p>\n<h2>Reading .mol files</h2>\n<p>manim-Chemistry can parse .mol files to create a dictionary with atoms and bond data. Currently, the data we are getting is:</p>\n<h3>Atoms dictionary:</h3>\n<ul>\n<li>Index: To know the index in the .mol file, which allows us to keep track of bonding.</li>\n<li>Coordinates: Used to give a position to the atom.</li>\n<li>Element: To know which element is it.</li>\n<li>Bond to. Using the index of other atoms, we get to know to which atoms is bond a certain atom.</li>\n</ul>\n<h3>Bonds dictionary:</h3>\n<ul>\n<li>From atom: The index of the atom starting the bond</li>\n<li>To atom: The index of the atom ending the bond</li>\n<li>Type: Indicates the type of bond. Check<a href=\"https://en.wikipedia.org/wiki/Chemical_table_file#Bond_block_specification\" rel=\"nofollow\">the bond block specifications</a> for further info.</li>\n<li>Stereo: Usefull to know if a cram bond is needed and which kind.</li>\n</ul>\n<h3>How to use it:</h3>\n<p>This is used inside both 2d and 3d molecules but can be used independently importing it from the utils submodule.</p>\n<pre><code>&gt;&gt;&gt; from manim_chemistry.utils import mol_parser\n&gt;&gt;&gt; morphine_parsed = mol_parser(\"morphine.mol\")\n&gt;&gt;&gt; morphine_parsed\n({1: {'coords': array([ 0.   , -0.825,  0.   ]), 'element': 'C', 'bond_to': {7: 'C', 2: 'C', 3: 'C'}}, 2: {'coords': array([-0.7145, -0.4125,  0.    ]), 'element': 'C', 'bond_to': {1: 'C', 12: 'O', 4: 'C'}}, 3: {'coords': array([ 0.7145, -0.4125,  0.    ]), 'element': 'C', 'bond_to': {1: 'C', 14: 'C', 5: 'C'}}, 4: {'coords': array([-0.7145,  0.4125,  0.    ]), 'element': 'C', 'bond_to': {2: 'C', 18: 'O', 6: 'C'}}, 5: {'coords': array([0.7145, 0.4125, 0.    ]), 'element': 'C', 'bond_to': {3: 'C', 6: 'C'}}, 6: {'coords': array([0.   , 0.825, 0.   ]), 'element': 'C', 'bond_to': {4: 'C', 5: 'C'}}, 7: {'coords': array([ 0.003 , -1.6464,  0.    ]), 'element': 'C', 'bond_to': {1: 'C', 8: 'C', 9: 'C', 22: 'C'}}, 8: {'coords': array([ 0.7109, -2.0631,  0.    ]), 'element': 'C', 'bond_to': {7: 'C', 10: 'C', 11: 'C', 20: 'H'}}, 9: {'coords': array([-0.7127, -2.0511,  0.    ]), 'element': 'C', 'bond_to': {7: 'C', 12: 'O', 13: 'C'}}, 10: {'coords': array([ 1.4268, -1.651 ,  0.    ]), 'element': 'C', 'bond_to': {8: 'C', 15: 'N', 14: 'C'}}, 11: {'coords': array([ 0.7067, -2.8808,  0.    ]), 'element': 'C', 'bond_to': {8: 'C', 16: 'C'}}, 12: {'coords': array([-1.5371, -1.1745,  0.    ]), 'element': 'O', 'bond_to': {2: 'C', 9: 'C'}}, 13: {'coords': array([-0.7206, -2.8689,  0.    ]), 'element': 'C', 'bond_to': {9: 'C', 17: 'O', 16: 'C'}}, 14: {'coords': array([ 1.431 , -0.8297,  0.    ]), 'element': 'C', 'bond_to': {3: 'C', 10: 'C'}}, 15: {'coords': array([ 2.1419, -2.0715,  0.    ]), 'element': \n'N', 'bond_to': {10: 'C', 19: 'C', 21: 'C'}}, 16: {'coords': array([-0.0128, -3.2891,  0.    ]), 'element': 'C', 'bond_to': {11: 'C', 13: 'C'}}, 17: {'coords': array([-1.4365, -3.2845,  0.    ]), 'element': 'O', 'bond_to': {13: 'C'}}, 18: {'coords': array([-1.4262,  0.8296,  0.    ]), 'element': 'O', 'bond_to': {4: 'C'}}, 19: {'coords': array([ 2.9416, -1.853 ,  0.    ]), 'element': 'C', 'bond_to': {15: 'N'}}, 20: {'coords': array([ 1.4954, -2.6258,  0.    ]), 'element': 'H', 'bond_to': {8: 'C'}}, 21: {'coords': array([ 2.1397, -1.2341,  0.    ]), 'element': 'C', 'bond_to': {15: 'N', 22: 'C'}}, 22: {'coords': array([ 0.7183, -1.233 ,  0.    ]), 'element': 'C', 'bond_to': {7: 'C', 21: 'C'}}}, {7: [{'to': 1, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}, {'to': 8, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}, {'to': 9, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}, {'to': 22, 'type': '1', 'stereo': 1, 'topology': 0, 'reacting_center_status': 0}], 1: [{'to': 2, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}, {'to': 3, 'type': '2', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}], 2: [{'to': 12, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}, {'to': 4, 'type': '2', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}], 3: [{'to': 14, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}, {'to': 5, 'type': '1', 'stereo': 0, 'topology': 0, \n'reacting_center_status': 0}], 4: [{'to': 18, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}, {'to': 6, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}], 5: [{'to': 6, 'type': '2', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}], 8: [{'to': 10, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}, {'to': 11, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}, {'to': 20, 'type': '1', 'stereo': 1, 'topology': 0, 'reacting_center_status': 0}], 9: [{'to': 12, 'type': '1', \n'stereo': 6, 'topology': 0, 'reacting_center_status': 0}, {'to': 13, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}], 10: [{'to': 15, 'type': '1', 'stereo': 1, 'topology': 0, 'reacting_center_status': 0}, {'to': 14, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}], 11: [{'to': 16, 'type': '2', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}], 13: [{'to': 17, 'type': '1', 'stereo': 6, 'topology': 0, 'reacting_center_status': 0}, {'to': 16, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': \n0}], 15: [{'to': 19, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}], 21: [{'to': 15, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}], 22: [{'to': 21, 'type': '1', 'stereo': 0, 'topology': 0, 'reacting_center_status': 0}]}\n</code></pre>\n<h1>Typical issues with .mol files</h1>\n<p>Sometimes you are trying to draw a molecule with a lot of atoms and bonds. This results in a file that looks like this:</p>\n<pre><code>  ACD/LABS04302300463D\n\n216265  0  0  0  0  0  0  0  0  1 V2000\n   16.2474   -9.9960    2.4976 P   0  0  0  0  0  0  0  0  0  0  0  0\n   17.2414   -9.9960    1.6140 P   0  0  0  0  0  0  0  0  0  0  0  0\n   16.2474  -11.2601    0.2434 P   0  0  0  0  0  0  0  0  0  0  0  0\n   17.2414  -11.2601    1.1271 P   0  0  0  0  0  0  0  0  0  0  0  0\n.\n.\n.\n</code></pre>\n<p>See that 216265? This is a problem. manimChemistry will think this is the number of atoms we have and this is a problem. At this stage of the development we need to manually correct this. In this example, we have 216 atoms and 265 bonds, so we have to separate it:</p>\n<pre><code>  ACD/LABS04302300463D\n\n216 265  0  0  0  0  0  0  0  0  1 V2000 \n   16.2474   -9.9960    2.4976 P   0  0  0  0  0  0  0  0  0  0  0  0\n   17.2414   -9.9960    1.6140 P   0  0  0  0  0  0  0  0  0  0  0  0\n   16.2474  -11.2601    0.2434 P   0  0  0  0  0  0  0  0  0  0  0  0\n   17.2414  -11.2601    1.1271 P   0  0  0  0  0  0  0  0  0  0  0  0\n.\n.\n.\n</code></pre>\n<p>Our problems are not solved. Probably some bonds will look like this:</p>\n<pre><code>213215  1  0  0  0  0\n201207  1  0  0  0  0\n214202  1  0  0  0  0\n214216  1  0  0  0  0\n\n</code></pre>\n<p>This 213215, 201207, 214202, 214216 are, in fact, bonds pointing from atom 213 to 215, 201 to 207, 214 to 202 and 214 to 216. We must solve this manually again:</p>\n<pre><code>213 215  1  0  0  0  0\n201 207  1  0  0  0  0\n214 202  1  0  0  0  0\n214 216  1  0  0  0  0\n\n</code></pre>\n<h1>Take a look to examples:</h1>\n<p>Inside this repo there is a folder examples with assets and basic files that might be useful. Make sure to check them!</p>\n<h1>Made with manimChemistry</h1>\n<p>Here you have some examples using manimChemistry. Feel free to contribute with your own animations and videos!</p>\n<p>Fullerene:\n<img src=\"/examples/examples_assets/Fullerene.png\" alt=\"plot\"></p>\n<p>Beta and alpha tin structures:\n<img src=\"/examples/examples_assets/TinPhases.png\" alt=\"plot\"></p>\n<p>Videos using manimChemistry:</p>\n<p><a href=\"https://www.youtube.com/watch?v=L7OXe94_WmA\" rel=\"nofollow\">https://www.youtube.com/watch?v=L7OXe94_WmA</a></p>\n<p><a href=\"https://youtu.be/KgiCl_o_Aws\" rel=\"nofollow\">https://youtu.be/KgiCl_o_Aws</a></p>\n<h1>How to contact</h1>\n<p>You can open issues and pull requests, but if you want to contact me directly you can go to:</p>\n<ul>\n<li>Email: <a href=\"mailto:unmoldequimica@gmail.com\" rel=\"nofollow\">unmoldequimica@gmail.com</a></li>\n<li>YouTube: <a href=\"https://www.youtube.com/@unmoldequimica\" rel=\"nofollow\">https://www.youtube.com/@unmoldequimica</a></li>\n<li>Twitter: <a href=\"https://twitter.com/unmoldequimica\" rel=\"nofollow\">https://twitter.com/unmoldequimica</a></li>\n</ul>\n<h1>Great contributers!</h1>\n<ul>\n<li><a href=\"https://github.com/chemnerd28\" rel=\"nofollow\">@chemnerd28</a></li>\n<li><a href=\"https://github.com/Ant-28\" rel=\"nofollow\">@Ant-28</a></li>\n</ul>\n<p>Special thanks to <a href=\"https://github.com/Rodrigo-Tenorio\" rel=\"nofollow\">@Rodrigo-Tenorio</a> for his help in the creation of this releasable package.</p>\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"home_page":"","keywords":"","license":"MIT License  Copyright (c) 2023 UMDQ  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","maintainer":"","maintainer_email":"UMDQ <unmoldequimica@gmail.com>","name":"manim-chemistry","package_url":"https://pypi.org/project/manim-chemistry/","platform":null,"project_url":"https://pypi.org/project/manim-chemistry/","project_urls":{"Issue tracker":"https://github.com/UnMolDeQuimica/manim-Chemistry/issues","Source":"https://github.com/UnMolDeQuimica/manim-Chemistry"},"release_url":"https://pypi.org/project/manim-chemistry/0.1.1/","requires_dist":["manim","numpy","pandas"],"requires_python":">=3.9","summary":"Manim Chemistry is a plugin for Manim which aims to make easier the animation of molecules and other chemistry-related objects such as orbitals, bohr diagrams and more.","version":"0.1.1","yanked":false,"yanked_reason":null},"last_serial":18874237,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"1582691fc655d9b9c374441bef06da744f4e63ba1d9aed95f1fa76fb587dfcf7","md5":"6f0764f83b6b3072f18542836ad45e54","sha256":"bfe60668ce147ce9c3fbcbf221bdad168a66bd0950aa4e0212426eaeb24495b7"},"downloads":-1,"filename":"manim_chemistry-0.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"6f0764f83b6b3072f18542836ad45e54","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.9","size":30196,"upload_time":"2023-05-19T16:51:55","upload_time_iso_8601":"2023-05-19T16:51:55.930304Z","url":"https://files.pythonhosted.org/packages/15/82/691fc655d9b9c374441bef06da744f4e63ba1d9aed95f1fa76fb587dfcf7/manim_chemistry-0.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8c92935b2b50fb477ec34f3daef2a8c56497e427ebdfc84191f2ac57a12f61d8","md5":"5b6af97465e2d8c1256b90fca3a9bb64","sha256":"743dcff0a45126c1d65da46385fcf971b7b40a3d6e2e1ac41c05381191a344d3"},"downloads":-1,"filename":"manim-chemistry-0.1.0.tar.gz","has_sig":false,"md5_digest":"5b6af97465e2d8c1256b90fca3a9bb64","packagetype":"sdist","python_version":"source","requires_python":">=3.9","size":1447147,"upload_time":"2023-05-19T16:51:58","upload_time_iso_8601":"2023-05-19T16:51:58.584911Z","url":"https://files.pythonhosted.org/packages/8c/92/935b2b50fb477ec34f3daef2a8c56497e427ebdfc84191f2ac57a12f61d8/manim-chemistry-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"27171a4894f45d9efe2dadfab39338c79d2d50207e8bf477322e87377562fa1e","md5":"aac206db7f3496a7f8435a1a5250bc98","sha256":"e781f3aae5402a381400404eb483e1cae6cf98506fb8c3cf791daf3c75c0a4b4"},"downloads":-1,"filename":"manim_chemistry-0.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"aac206db7f3496a7f8435a1a5250bc98","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.9","size":30939,"upload_time":"2023-07-13T11:36:17","upload_time_iso_8601":"2023-07-13T11:36:17.254560Z","url":"https://files.pythonhosted.org/packages/27/17/1a4894f45d9efe2dadfab39338c79d2d50207e8bf477322e87377562fa1e/manim_chemistry-0.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1386be4b9332026e223ea693c6d510b02536ceb5dd66c35efd54dbd3ba58b89e","md5":"9bd5ce3d787a4b84f7eef363fa0adb98","sha256":"4fd26266cd7e522c7af726bfb0d9e63206e999386e3ee1698d03e889f2856871"},"downloads":-1,"filename":"manim-chemistry-0.1.1.tar.gz","has_sig":false,"md5_digest":"9bd5ce3d787a4b84f7eef363fa0adb98","packagetype":"sdist","python_version":"source","requires_python":">=3.9","size":1498684,"upload_time":"2023-07-13T11:36:18","upload_time_iso_8601":"2023-07-13T11:36:18.877821Z","url":"https://files.pythonhosted.org/packages/13/86/be4b9332026e223ea693c6d510b02536ceb5dd66c35efd54dbd3ba58b89e/manim-chemistry-0.1.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"27171a4894f45d9efe2dadfab39338c79d2d50207e8bf477322e87377562fa1e","md5":"aac206db7f3496a7f8435a1a5250bc98","sha256":"e781f3aae5402a381400404eb483e1cae6cf98506fb8c3cf791daf3c75c0a4b4"},"downloads":-1,"filename":"manim_chemistry-0.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"aac206db7f3496a7f8435a1a5250bc98","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.9","size":30939,"upload_time":"2023-07-13T11:36:17","upload_time_iso_8601":"2023-07-13T11:36:17.254560Z","url":"https://files.pythonhosted.org/packages/27/17/1a4894f45d9efe2dadfab39338c79d2d50207e8bf477322e87377562fa1e/manim_chemistry-0.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1386be4b9332026e223ea693c6d510b02536ceb5dd66c35efd54dbd3ba58b89e","md5":"9bd5ce3d787a4b84f7eef363fa0adb98","sha256":"4fd26266cd7e522c7af726bfb0d9e63206e999386e3ee1698d03e889f2856871"},"downloads":-1,"filename":"manim-chemistry-0.1.1.tar.gz","has_sig":false,"md5_digest":"9bd5ce3d787a4b84f7eef363fa0adb98","packagetype":"sdist","python_version":"source","requires_python":">=3.9","size":1498684,"upload_time":"2023-07-13T11:36:18","upload_time_iso_8601":"2023-07-13T11:36:18.877821Z","url":"https://files.pythonhosted.org/packages/13/86/be4b9332026e223ea693c6d510b02536ceb5dd66c35efd54dbd3ba58b89e/manim-chemistry-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}}},"staticQueryHashes":["1049322566","4202924991","4227209097"],"slicesMap":{}}