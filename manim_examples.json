[
    {
        "code": "from manim import *\nclass CircleExample(Scene):\n    def construct(self):\n        circle = Circle(color=BLUE, fill_opacity=0.5)\n        self.add(circle)\n",
        "output": "CircleExample.png",
        "name": "CircleExample",
        "visible": true,
        "type": "image"
    },
    {
        "code": "class ContinuousMotion(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT\n        stream_lines = StreamLines(func, stroke_width=2, max_anchors_per_line=30)\n        self.add(stream_lines)\n        stream_lines.start_animation(warm_up=False, flow_speed=1.5)\n        self.wait(stream_lines.virtual_time / stream_lines.flow_speed)\n",
        "output": "ContinuousMotion",
        "name": "ContinuousMotion",
        "visible": false,
        "type": "video"
    },
    {
        "code": "from manim import *\nclass SquareExample(Scene):\n    def construct(self):\n        square = Square(color=YELLOW, fill_opacity=0.5)\n        self.add(square)\n",
        "output": "SquareExample.png",
        "name": "SquareExample",
        "visible": false,
        "type": "image"
    },
    {
        "code": "from manim import *\nclass UnionExample(Scene):\n    def construct(self):\n        sq = Square(color=RED, fill_opacity=1).move_to([-2, 0, 0])\n        cr = Circle(color=BLUE, fill_opacity=1).move_to([-1.3, 0.7, 0])\n        un = Union(sq, cr, color=GREEN, fill_opacity=1).move_to([1.5, 0.3, 0])\n        self.add(sq, cr, un)\n",
        "output": "UnionExample.png",
        "name": "UnionExample",
        "visible": false,
        "type": "image"
    },
    {
        "code": "class WarpSquare(Scene):\n    def construct(self):\n        square = Square()\n        self.play(\n            ApplyPointwiseFunction(\n                lambda point: complex_to_R3(np.exp(R3_to_complex(point))),\n                square,\n            ),\n        )\n        self.wait()\n",
        "output": "WarpSquare",
        "name": "WarpSquare",
        "visible": false,
        "type": "video"
    },
    {
        "code": "class SquareToCircle(Scene):\n    def construct(self):\n        circle = Circle()\n        square = Square()\n        square.flip(RIGHT)\n        square.rotate(-3 * TAU / 8)\n        circle.set_fill(PINK, opacity=0.5)\n\n        self.play(Create(square))\n        self.play(Transform(square, circle))\n        self.play(FadeOut(square))\n",
        "output": "SquareToCircle",
        "name": "SquareToCircle",
        "visible": false,
        "type": "video"
    }
]
